import pandas as pd
------------------------------------------------------------------------
df = pd.read_csv('https://bit.ly/perch_csv_data')
perch_full = df.to_numpy()
print(perch_full)
------------------------------------------------------------------------

import numpy as np

perch_weight = np.array(
    [5.9, 32.0, 40.0, 51.5, 70.0, 100.0, 78.0, 80.0, 85.0, 85.0,
    110.0, 115.0, 125.0, 130.0, 120.0, 120.0, 130.0, 135.0, 110.0,
    130.0, 150.0, 145.0, 150.0, 170.0, 225.0, 145.0, 188.0, 180.0,
    197.0, 218.0, 300.0, 260.0, 265.0, 250.0, 250.0, 300.0, 320.0,
    514.0, 556.0, 840.0, 685.0, 700.0, 700.0, 690.0, 900.0, 650.0,
    820.0, 850.0, 900.0, 1015.0, 820.0, 1100.0, 1000.0, 1100.0,
    1000.0, 1000.0])
------------------------------------------------------------------------
from sklearn.model_selection import train_test_split

train_input, test_input, train_target, test_target = train_test_split(perch_full, perch_weight, random_state=42)
------------------------------------------------------------------------
from sklearn.preprocessing import PolynomialFeatures

poly = PolynomialFeatures()
poly.fit([[2, 3]])
print(poly.transform([[2, 3]]))
------------------------------------------------------------------------
poly = PolynomialFeatures(include_bias=False)
poly.fit([[2, 3]])
print(poly.transform([[2, 3]]))
------------------------------------------------------------------------
poly = PolynomialFeatures(include_bias=False)

poly.fit(train_input)
train_poly = poly.transform(train_input)
------------------------------------------------------------------------
print(train_poly.shape)
------------------------------------------------------------------------
poly.get_feature_names_out()
------------------------------------------------------------------------
test_poly = poly.transform(test_input)
------------------------------------------------------------------------
from sklearn.linear_model import LinearRegression

lr = LinearRegression()
lr.fit(train_poly, train_target)
print(lr.score(train_poly, train_target))
------------------------------------------------------------------------
print(lr.score(test_poly, test_target))
------------------------------------------------------------------------
poly = PolynomialFeatures(degree=5, include_bias=False)

poly.fit(train_input)
train_poly = poly.transform(train_input)
test_poly = poly.transform(test_input)
------------------------------------------------------------------------
print(train_poly.shape)
------------------------------------------------------------------------
lr.fit(train_poly, train_target)
print(lr.score(train_poly, train_target))
------------------------------------------------------------------------
print(lr.score(test_poly, test_target))
------------------------------------------------------------------------
from sklearn.preprocessing import StandardScaler

ss = StandardScaler()
ss.fit(train_poly)

train_scaled = ss.transform(train_poly)
test_scaled = ss.transform(test_poly)
------------------------------------------------------------------------
from sklearn.linear_model import Ridge

ridge = Ridge()
ridge.fit(train_scaled, train_target)
print(ridge.score(train_scaled, train_target))
------------------------------------------------------------------------
print(ridge.score(test_scaled, test_target))
------------------------------------------------------------------------
import matplotlib.pyplot as plt

train_score = []
test_score = []
------------------------------------------------------------------------
alpha_list = [0.001, 0.01, 0.1, 1, 10, 100]
for alpha in alpha_list:
    # 릿지 모델을 만듭니다
    ridge = Ridge(alpha=alpha)
    # 릿지 모델을 훈련합니다
    ridge.fit(train_scaled, train_target)
    # 훈련 점수와 테스트 점수를 저장합니다
    train_score.append(ridge.score(train_scaled, train_target))
    test_score.append(ridge.score(test_scaled, test_target))
------------------------------------------------------------------------
plt.plot(np.log10(alpha_list), train_score)
plt.plot(np.log10(alpha_list), test_score)
plt.xlabel('alpha')
plt.ylabel('R^2')
plt.show()
------------------------------------------------------------------------
ridge = Ridge(alpha=0.1)
ridge.fit(train_scaled, train_target)

print(ridge.score(train_scaled, train_target))
print(ridge.score(test_scaled, test_target))
------------------------------------------------------------------------
from sklearn.linear_model import Lasso

lasso = Lasso()
lasso.fit(train_scaled, train_target)
print(lasso.score(train_scaled, train_target))
--------------------------------------------------------
print(lasso.score(test_scaled, test_target))
--------------------------------------------------------
train_score = []
test_score = []

alpha_list = [0.001, 0.01, 0.1, 1, 10, 100]
for alpha in alpha_list:
    # 라쏘 모델을 만듭니다
    lasso = Lasso(alpha=alpha, max_iter=10000)
    # 라쏘 모델을 훈련합니다
    lasso.fit(train_scaled, train_target)
    # 훈련 점수와 테스트 점수를 저장합니다
    train_score.append(lasso.score(train_scaled, train_target))
    test_score.append(lasso.score(test_scaled, test_target))
--------------------------------------------------------
plt.plot(np.log10(alpha_list), train_score)
plt.plot(np.log10(alpha_list), test_score)
plt.show()
--------------------------------------------------------
lasso = Lasso(alpha=10)
lasso.fit(train_scaled, train_target)

print(lasso.score(train_scaled, train_target))
print(lasso.score(test_scaled, test_target))
--------------------------------------------------------
print(np.sum(lasso.coef_ == 0))



농업데이터 실습 데이터셋

import pandas as pd

df = pd.read_csv('https://raw.githubusercontent.com/khw51793/code/main/agriculture_full.csv')
agriculture_full = df.to_numpy()
print(agriculture_full)

growth_index = np.array([
    20.20495222, 40.58233879, 56.33592295, 46.43328749, 31.05736214,
    45.66752687, 71.11774173, 56.73851534, 56.46795737, 100.0,
    29.90354921, 61.41968934, 46.74106837, 87.41390774, 35.07781843,
    61.91448997, 32.1375256,  25.19338639, 59.96712636, 55.33135648,
    78.21984441, 1.71146486, 71.36535972, 0.0,         38.00088904,
    87.94724049, 36.85877596, 13.11192593, 35.64083529, 36.61732194,
    15.86285193, 35.68706433, 31.67671825, 40.87091197, 53.07427822,
    73.45157147, 5.62420417,  38.16964012, 44.04512951, 33.1940521,
    39.60034758, 64.95781179, 24.55364498, 49.90552856, 27.96129622,
    45.27933,    17.63586716, 12.36608073, 71.27180909, 53.34584126,
    29.76719091, 58.81436948, 63.97065669, 58.79676409, 31.97390396,
    21.47007205, 78.59322524, 24.98323144, 33.53359001, 60.4097612,
    28.89662889, 44.04204343, 8.37655972,  9.77172188,  47.20734158,
    28.82812832, 78.22268639, 48.39329815, 19.85709146, 35.92774111,
    41.62840059, 4.59156476,  51.5472349,  47.27295927, 16.00447935,
    46.07284326, 36.03273434, 45.45582364, 38.83552476, 65.20263763,
    37.43593178, 41.77031422, 39.61504726, 20.00389301, 57.23747864,
    16.47344865, 34.83021941, 43.40623238, 24.71170099, 15.46456423,
    14.69153992, 33.31345282, 17.6962995,  18.32429208, 44.6267534,
    22.42535596, 28.47011702, 29.62714972, 44.27203642, 30.02775646
])
